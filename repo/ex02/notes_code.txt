

-
define

_v : le vecteur 
_n : la taille d'un élément dans v 
_nbE : le nombre d'éléments dans v
_e : l'indice dans v du début d'un élément
_h : l'indice dans v de la tête d'un d'élément
_i : l'indice d'un élément
-

-
calculs

_nbE = _v.size() / _n

trouver le _h à partir d'un _e :
	_h = _e + _n - 1

trouver le _e à partir d'un _i :
	_e = _i * _n

trouver le _h à partir d'un _i :
	_h = _i * _n + _n - 1

trouver l'indice dans v de l'élément b_k
	c'est 2 * (k - i)
	on peut ensuite lui appliquer la formule pour trouver le i_e et i_h
-



-
on veut swap les pairs
on donne v et la taille d'un element

parcourir les elements avec iE, deux par deux
	si les tetes sont pas dans le bon ordre
		swap les pairs




-




	i = n - 1
	j = 0
	k = 0
	tant que i < size de v
		on a la tete à l'indice i
		on a l'indice du début de l'élément à l'indice j
		pour a l'indice de l'élément à l'indice k
		i += n
		j += n
-


-
imaginons qu'on a remonté tous les appels récursifs

on a une liste current d'éléments de taille 1 : b1 a1 b2 a2...

si le nombre d'éléments de current est <= 2
	return current

next = [b1, a1]
jacobsthal_previous = 1
jacobsthal_current = 3
indice du dernier b =
	(nombre d'éléments de current) + 1 / 2
	avec nombre d'éléments de current = size / n

indice du b_previous = formule du 2 * (i - 1) pour i = jacobsthal_previous
indice du b_current = ...
indice de b = indice du b_previous + 2 * n

tant que l'indice de b < v.size
	tant que l'indice de b < l'indice 
	tant qu'il y a des b d'indice compris entre jacobsthal current (inclus) et jacobsthal previous (exclu) dans current :
		insérer (dans le sens décroissant) les b dans le next 
	insérer les a correspondant aux b insérés dans le next (dans l'ordre croissant)
	tmp = jacobsthal_previous
	jacobsthal_previous = jacobsthal_current
	jacobsthal_current += 2 * tmp
return next
-











-
autre idée : utiliser deux vecteurs, un pour les a, un autre pour les b
comme ça, a[i] et b[i] on le bon sens

pour commencer on peut peut etre utiliser plus de données que nécessaires.

à terme j'aimerais bien, si on garde l'idées des deux vecteurs a et b, adapter l'insertion pour qu'elle se fasse directement dans le vecteur des a.

pour l'instant, on va utiliser un autre vecteur pour écrire le next

dans a et b on peut laisser la première case vide pour utiliser les vrais indices !


gardons le swap en place de tout à l'heure pour l'instant, je pense pas qu'il soit si terrible.

on a un vecteur current : b1 a1 b2 a2...

init de a[0] à a[n - 1] à 0
pareil pour b

on parcourt current avec i pour l'indice du début, j pour la tete, k pour indice :
	si k est pair :
		insérer l'élément dans b
	sinon
		insérer l'élément dans a
-



-
version simplifiée

-


