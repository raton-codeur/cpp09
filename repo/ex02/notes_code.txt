

-
vecteur v
une paire = 2 éléments
n : la taille indivisible d'un élément
-

-
parcourir les éléments
	i = n - 1
	j = 0
	k = 0
	tant que i < size de v
		on a la tete à l'indice i
		on a l'indice du début de l'élément à l'indice j
		pour a l'indice de l'élément à l'indice k
		i += n
		j += n
-


-
imaginons qu'on a remonté tous les appels récursifs

on a une liste current d'éléments de taille 1 : b1 a1 b2 a2...

si le nombre d'éléments de current est <= 2
	return current

next = [b1, a1]
jacobsthal = [1, 3]
jacobsthal_previous = 1
jacobsthal_current = 3
tant qu'on a au moins un b d'indice compris entre jacobsthal current (inclus) et jacobsthal previous (exclu) dans current :
	tant qu'il y a des b d'indice compris entre jacobsthal current (inclus) et jacobsthal previous (exclu) dans current :
		insérer (dans le sens décroissant) les b dans le next 
	insérer les a correspondant aux b insérés dans le next (dans l'ordre croissant)
	jacobsthal.push(jacobsthal_current + 2 * jacobsthal_previous)
	jacobsthal_previous = jacobsthal_current
	jacobsthal_current = back de jacobsthal
return next

