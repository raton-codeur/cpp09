

-
interdit

C++11
Boost
*printf()
*alloc()
free()
using namespace <ns_name>
friend
STL
Containers (vector/list/map/...)
Algorithmes (include <algorithm>)
fonction dans un fichier d'en-tête sauf fonction template
-






-
afficher une chaine sur au moins 10 caractères
std::cout << std::setw(10) << s;
il faut inclure #include <iomanip>
-



-
afficher un nombre sur 2 avec un 0 à gauche
<< std::setfill('0') << std::setw(2) <<
-


-
si on veut forcer l'utilisation d'un constructeur avec paramètre pour la classe C,
il faut mettre "C();" en privé.
-


-
time_t, time, localtime
#include <ctime>

std::put_time
#include <iomanip>


time_t		now;
struct tm*	tm;
time(&now);
tm = localtime(&now);

dans now on a le nombre de secondes écoulées depuis l'epoch
localtime transforme ce nombre de secondes en une structure qui contient toutes les informations : l'année, le mois, le jour, l'heure, etc

put_time 
C'est un manipulateur de flux permettant d'afficher un objet tm dans un format spécifique
cout << std::put_time(tm, "[%Y%m%d_%H%M%S] ");

sinon, à la main :
1900 + tm->tm_year
tm->tm_mon + 1
tm->tm_mday
tm->tm_hour
tm->tm_min
tm->tm_sec
-







-
#pragma once

à la place de #ifndef, #def, #endif
-



-
la classe ostringstream

pour "output string stream"

std::ostringstream oss;

dans sstream

c'est un flux.
ça permet de récupérer du texte, comme avec si on écrivait sur cout, mais dans un objet qui pourra ensuite etre converti en string par exemple.

oss.str()
pour convertir en string


ofstream et ifstream est dans fstream


si on a ouvert un fichier dans un ifstream nommé f, on peut faire :

oss << f.rdbuf();


il existe un peu pareil que cin, pour lire une string comme si c'était un fichier :
istringstream

pour combiner ostringstream et istringstream on a stringstream.
ça permet d'avoir un flux dans lequel on peut à la fois écrire et lire.
-




-
size_t find(const std::string& str, size_t pos = 0) const;
méthode sur une chaine

pos c'est la position de départ pour commencer la recherche.

elle renvoie l'index de la première occurrence de str ou std::string::npos si str n'est pas trouvée

npos est l'abréviation de "no position"
-



-
std::string& replace(size_t pos, size_t len, const std::string& str);

pos : la position à partir de laquelle remplacer
len : combien de caractères vont être remplacés
str : la chaine à insérer
-




-
les opérateurs de pré et post [in/dé]crémentation


pré incrémentation

C& operator++();

on modifie l'objet et on le renvoie vraiment


post incrémentation

C operator++(int); 

on modifie l'objet et on renvoie une copie de l'objet tel qu'il était avant la modification

int est un paramètre factice qui permet de différencier les 2 définitions, il n’est pas utilisé, c’est juste une convention syntaxique
-



-
construire un nombre a virgule fixe


a partir dun entier c'est facile, on decale les bits a gauche avec <<


pour un flottant f le constructeur est : roundf(f * (1 << _fractionalBits))

explications :

decaler un nombre de 3 bits a gauche ca revient a le multiplier par 2 puissance 3

or, 2 puissance 3 = 1 << 3

si la multiplication ne tombe pas juste, et comme on ne garde que la partie entiere du resultat, la representation en virgule fixe sera une approximation du nombre
 






-
flag de compilation -Wshadow et -Wno-shadow

activer / désactiver l'avertissement de shadowing

c'est quand une variable locale masque une variable de la même portée ou d'une portée plus large
-



check qu'un char est affiachable 
#include <cctype>
std::isprint()




-
checker les overflow et underflow avec strtol, strtod, strtof

mettre errno à 0 avec la convertion
errno = ERANGE en cas d'over/under flow

pour les int
récupérer dans un long
soit le result vaut le long max / min
soit le result est < ou > à int min / int max

pour les double et les float
si le result = 0 c'est un underflow, on est trop proche de 0
si le result = HUGE_VAL(F) ou -HUGE_VAL(F), c'est un overflow, ie +inf ou -inf
ya d'autre cas rares ou on a juste erange et un result bizarre
-



-
on peut utiliser
std::cout << std::hex << a << std::dec
pour afficher un entier a en hexa
-


-
quand on a une fonction virtuelle (je crois) on a le RTTI = Run-Time Type Information = Information de type à l'exécution

on peut y accéder avec le header <typeinfo> qui fournit la classe std::type_info

la fonction typeid(objet) permet de savoir le type d'un objet à l'exécution

on peut faire : typeid(a) == typeid(b)

on a : std::cout << "Type of a: " << typeid(a).name()
-


-
i : un iterateur
i = std::find(itérateur de début sur un conteneur, iterateur de fin sur ce conteneur, valeur à chercher)
-



-
sur un vecteur v

v.capacity() pour savoir combien d'éléments allouées
v.size() pour le nombre d'éléments

généralement, quand on a atteint size == capacity (exemple : v.push_back), il réalloue un nouveau tableau de taille double et recopie le tableau

.reserve() pour changer la capacity
bonne pratique : 
std::vector<int> v;
v.reserve(50);


insérer des éléments de v dans vv
vv.insert(itérateur de vv pour indiquer la position d'insertion, itérateur de début de v, itérateur de fin de v)


v.swap(vv)
pour libérer v et le remplacer par vv


std::logic_error est pas mal


constructeur intéressant pour string : (nombre de répétition, une chaine)


passer d'un int à une string : std::to_string(n)



trier un vecteur :
std::sort(itérateur de début, itérateur de fin)


std::distance(itérateur de début, itérateur de fin) → entier


-
pour une stack s 


s.push(10) → empiler 10
ou peut aussi utiliser emplace. en théorie, on utiliser emplace pour créer un nouveau objet et push pour les objets déjà créés

s.top() → référence au sommet
-



deque
→ double-ended queue
→ file doublement terminée


operateur [] en gros pareil que .at()
.at est plus sécurisé 



